-- Create Entities with Oracle-compatible syntax

CREATE TABLE Users (
    UserID NUMBER UNIQUE NOT NULL,
    Email VARCHAR2(255) UNIQUE NOT NULL,
    Password VARCHAR2(255) NOT NULL,
    Username VARCHAR2(255) UNIQUE NOT NULL,
    PhoneNumber VARCHAR2(15),
    Age NUMBER,
    isAdmin NUMBER(1) CHECK (isAdmin IN (0, 1))
);

CREATE TABLE Movie (
    MovieID NUMBER UNIQUE NOT NULL,
    Title VARCHAR2(255) NOT NULL,
    ReleaseDate DATE NOT NULL,
    Description CLOB,
    Duration NUMBER NOT NULL,
    Rating NUMBER(2,1),
    TicketCost NUMBER(10,2) NOT NULL,
    Director VARCHAR2(255) NOT NULL,
    Genre VARCHAR2(255)
);

-- Create Relationships
CREATE TABLE AdminEditsMovie (
    UserID NUMBER,
    MovieID NUMBER,
    EditTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (UserID, MovieID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (MovieID) REFERENCES Movie(MovieID)
);

CREATE TABLE Booking (
    BookingID NUMBER UNIQUE NOT NULL,
    UserID NUMBER NOT NULL,
    MovieID NUMBER NOT NULL,
    BookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Quantity NUMBER DEFAULT 1 NOT NULL,
    TicketPrice NUMBER(10,2) NOT NULL,
    TotalAmount NUMBER(10,2) GENERATED ALWAYS AS (Quantity * TicketPrice) VIRTUAL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (MovieID) REFERENCES Movie(MovieID)
);

CREATE TABLE MOVIE_SCHEDULE (
    SCHEDULE_ID NUMBER PRIMARY KEY,
    MOVIEID NUMBER NOT NULL,
    SCREEN_DATE DATE NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP NOT NULL,
    FOREIGN KEY (MOVIEID) REFERENCES MOVIE(MOVIEID),
    CONSTRAINT chk_time CHECK (END_TIME > START_TIME)
);

CREATE OR REPLACE PROCEDURE SearchMovies (
    p_search_term IN VARCHAR2,
    p_results OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_results FOR
        SELECT MovieID, Title, Genre, Director, ReleaseDate, Rating, TicketCost
        FROM Movie
        WHERE LOWER(Title) LIKE '%' || LOWER(p_search_term) || '%'
           OR LOWER(Genre) LIKE '%' || LOWER(p_search_term) || '%';
END;

CREATE OR REPLACE PROCEDURE SearchUserById (
    p_user_id IN NUMBER,
    p_email OUT VARCHAR2,
    p_username OUT VARCHAR2,
    p_phone OUT VARCHAR2,
    p_age OUT NUMBER,
    p_is_admin OUT NUMBER
)
AS
BEGIN
    SELECT Email, Username, PhoneNumber, Age, isAdmin
    INTO p_email, p_username, p_phone, p_age, p_is_admin
    FROM Users
    WHERE UserID = p_user_id;
END;